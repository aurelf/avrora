/* Generated By:JavaCC: Do not edit this line. ProbeParser.java */
package avrora.test.probes;
import avrora.core.isdl.ast.*;
import avrora.core.isdl.*;
import java.util.List;
import java.util.LinkedList;

public class ProbeParser implements ProbeParserConstants {

/* Begin GRAMMAR */
  final public void ProbeTest() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTRUCTION:
      case ARCHITECTURE:
      case FORMAT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Declaration();
    }
    Main();
  }

  final public void Main() throws ParseException {
    jj_consume_token(OPERAND);
    jj_consume_token(LBRACKET);
    Body();
    jj_consume_token(RBRACKET);
  }

  final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTRUCTION:
      ProbeDeclaration();
      break;
    case FORMAT:
      WatchDeclaration();
      break;
    case ARCHITECTURE:
      EventDeclaration();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Body() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
      case REGISTER:
      case IMMEDIATE:
      case ADDRESS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Statement();
      jj_consume_token(SEMI);
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(INTEGER_LITERAL);
      break;
    case REGISTER:
      jj_consume_token(REGISTER);
      jj_consume_token(IDENTIFIER);
      break;
    case IMMEDIATE:
      jj_consume_token(IMMEDIATE);
      jj_consume_token(INTEGER_LITERAL);
      break;
    case ADDRESS:
      jj_consume_token(ADDRESS);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProbeDeclaration() throws ParseException {
    jj_consume_token(INSTRUCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    Body();
    jj_consume_token(PIPE);
    Body();
    jj_consume_token(RBRACKET);
  }

  final public void WatchDeclaration() throws ParseException {
    jj_consume_token(FORMAT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    Body();
    jj_consume_token(PIPE);
    Body();
    jj_consume_token(PIPE);
    Body();
    jj_consume_token(PIPE);
    Body();
    jj_consume_token(RBRACKET);
  }

  final public void EventDeclaration() throws ParseException {
    jj_consume_token(ARCHITECTURE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    Body();
    jj_consume_token(RBRACKET);
  }

  public ProbeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1c000,0x1c000,0x3c0000,0x3c0000,};
   }

  public ProbeParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProbeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public ProbeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProbeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public ProbeParser(ProbeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(ProbeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
