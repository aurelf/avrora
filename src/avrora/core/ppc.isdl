architecture ppc {

    format IFORM = { opcode[5:0], li[23:0], aa[0], lk[0] };
    format BFORM = { opcode[5:0], bo[4:0], bi[4:0], aa[0], lk[0] };
    format SCFORM = { opcode[5:0], 0[23:0], 1[0], 0[0] };
    format DFORM1 = { opcode[5:0], d[4:0], a[4:0], imm[15:0] };
    format DFORM2 = { opcode[5:0], crfd[2:0], 0[0], l[0], a[4:0], imm[15:0] };
    format XOFORM = { opcode[5:0], d[4:0], a[4:0], b[4:0], xop[9:0], rc[0] };

    operand SIMM16[16]: immediate = [-32768, 32767];

    operand GPR[5]: register = {
        r0 = 0,  r1 = 1,  r2 = 2,  r3 = 3,
        r0 = 4,  r1 = 5,  r2 = 6,  r3 = 7,
        r0 = 8,  r1 = 9,  r2 = 10, r3 = 11,
        r0 = 12, r1 = 13, r2 = 14, r3 = 15,
        r0 = 16, r1 = 17, r2 = 18, r3 = 19,
        r0 = 20, r1 = 21, r2 = 22, r3 = 23,
        r0 = 24, r1 = 25, r2 = 26, r3 = 27,
        r0 = 28, r1 = 29, r2 = 30, r3 = 31
    };

    state GPR: int.32[32];

    state R0:  int.32 <=> GPR[0] = 0;
    state R1:  int.32 <=> GPR[1];
    state R2:  int.32 <=> GPR[2];
    state R3:  int.32 <=> GPR[3];
    state R4:  int.32 <=> GPR[4];
    state R5:  int.32 <=> GPR[5];
    state R6:  int.32 <=> GPR[6];
    state R7:  int.32 <=> GPR[7];
    state R8:  int.32 <=> GPR[8];
    state R9:  int.32 <=> GPR[9];
    state R10: int.32 <=> GPR[10];
    state R11: int.32 <=> GPR[11];
    state R12: int.32 <=> GPR[12];
    state R13: int.32 <=> GPR[13];
    state R14: int.32 <=> GPR[14];
    state R15: int.32 <=> GPR[15];
    state R16: int.32 <=> GPR[16];
    state R17: int.32 <=> GPR[17];
    state R18: int.32 <=> GPR[18];
    state R19: int.32 <=> GPR[19];
    state R20: int.32 <=> GPR[20];
    state R21: int.32 <=> GPR[21];
    state R22: int.32 <=> GPR[22];
    state R23: int.32 <=> GPR[23];
    state R24: int.32 <=> GPR[24];
    state R25: int.32 <=> GPR[25];
    state R26: int.32 <=> GPR[26];
    state R27: int.32 <=> GPR[27];
    state R28: int.32 <=> GPR[28];
    state R29: int.32 <=> GPR[29];
    state R30: int.32 <=> GPR[30];
    state R31: int.32 <=> GPR[31];

    state FPR: double.64[32];

    state FPR0:  double.64[32] <=> FPR[0];
    state FPR1:  double.64[32] <=> FPR[1];
    state FPR2:  double.64[32] <=> FPR[2];
    state FPR3:  double.64[32] <=> FPR[3];
    state FPR4:  double.64[32] <=> FPR[4];
    state FPR5:  double.64[32] <=> FPR[5];
    state FPR6:  double.64[32] <=> FPR[6];
    state FPR7:  double.64[32] <=> FPR[7];
    state FPR8:  double.64[32] <=> FPR[8];
    state FPR9:  double.64[32] <=> FPR[9];
    state FPR10: double.64[32] <=> FPR[10];
    state FPR11: double.64[32] <=> FPR[11];
    state FPR12: double.64[32] <=> FPR[12];
    state FPR13: double.64[32] <=> FPR[13];
    state FPR14: double.64[32] <=> FPR[14];
    state FPR15: double.64[32] <=> FPR[15];
    state FPR16: double.64[32] <=> FPR[16];
    state FPR17: double.64[32] <=> FPR[17];
    state FPR18: double.64[32] <=> FPR[18];
    state FPR19: double.64[32] <=> FPR[19];
    state FPR20: double.64[32] <=> FPR[20];
    state FPR21: double.64[32] <=> FPR[21];
    state FPR22: double.64[32] <=> FPR[22];
    state FPR23: double.64[32] <=> FPR[23];
    state FPR24: double.64[32] <=> FPR[24];
    state FPR25: double.64[32] <=> FPR[25];
    state FPR26: double.64[32] <=> FPR[26];
    state FPR27: double.64[32] <=> FPR[27];
    state FPR28: double.64[32] <=> FPR[28];
    state FPR29: double.64[32] <=> FPR[29];
    state FPR30: double.64[32] <=> FPR[30];
    state FPR31: double.64[32] <=> FPR[31];

    state CR:   int.32;
    state FPCR: int.32;
    state XER:  int.32;
    state LR:   int.32;
    state CTR:  int.32;

    state RAM: int.32[...];

    instruction "add" rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $GPR(rd) = performAddition($GPR(ra), $GPR(rb), 0, false, false);
        };
    };

    instruction "addo" rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $GPR(rd) = performAddition($GPR(ra), $GPR(rb), 0, true, false);
        };
    };

    instruction "add." rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), 0, false, true);
        };
    };

    instruction "addo." rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), 0, true, true);
        };
    };

    instruction "addc" rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), XER, false, false);
        };
    };

    instruction "addco" rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), XER, true, false);
        };
    };

    instruction "addc." rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), XER, false, true);
        };
    };

    instruction "addco." rd: GPR, ra: GPR, rb: GPR {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
        execute = {
            $regs(rd) = performAddition($regs(ra), $regs(rb), XER, true, true);
        };
    };

    instruction "addic" rd: GPR, ra: GPR, imm: SIMM16 {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
    };

    instruction "addic." rd: GPR, ra: GPR, imm: SIMM16 {
        // TODO: this encoding format is not correct
        encoding = XOFORM;
    };
}