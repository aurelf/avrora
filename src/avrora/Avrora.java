package avrora;

import avrora.util.Terminal;

/**
 * The <code>Avrora</code> class contains several utilities relating to
 * exceptions and errors within Avrora.
 * @author Ben L. Titzer
 */
public class Avrora {

    /**
     * The <code>Error</code> class is the base class of all errors in Avrora.
     * It provides a few extra utility functions and is useful for distinguishing
     * exceptions generated by Avrora itself and the Java runtime.
     */
    public static class Error extends java.lang.Error {

        protected final String message, param;
        public static boolean STACKTRACES;

        public Error(String p) {
            message = "Avrora Error";
            param = p;
        }

        public Error(String n, String p) {
            super(n);
            message = n;
            param = p;
        }

        public String getParam() {
            return param;
        }

        public void report() {
            Terminal.printColor(message, Terminal.ERROR_COLOR);
            Terminal.print(": " + param + "\n");
            if (STACKTRACES) {
                printStackTrace();
            }
        }
    }

    /**
     * The <code>InternalError</code> class is a class of errors corresponding
     * to exceptional conditions within Avrora.
     */
    public static class InternalError extends Error {
        public InternalError(String param) {
            super(param);
        }

        public void report() {
            Terminal.printColor("Avrora Internal Error", Terminal.ERROR_COLOR);
            Terminal.print(": " + param + "\n");
            printStackTrace();
        }
    }

    public static InternalError unimplemented() {
        return new InternalError("unimplemented");
    }

    public static InternalError failure(String s) {
        return new InternalError(s);
    }

    public static void userError(String s) {
        throw new Error(s);
    }

    public static void userError(String s, String p) {
        throw new Error(s, p);
    }


}
