/* Generated By:JavaCC: Do not edit this line. GASParserTokenManager.java */
package avrora.syntax.gas;


public class GASParserTokenManager implements GASParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active0 & 0x100L) != 0L || (active2 & 0x1000000000000L) != 0L)
                    return 2;
                if ((active0 & 0xfffffffffff00000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x1ffffffL) != 0L) {
                    jjmatchedKind = 153;
                    return 25;
                }
                return -1;
            case 1:
                if ((active0 & 0xfffffffffff00000L) != 0L || (active1 & 0xfff3ff09ff87ffffL) != 0L || (active2 & 0x1f1ffffL) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 153;
                        jjmatchedPos = 1;
                    }
                    return 25;
                }
                if ((active0 & 0x100L) != 0L)
                    return 0;
                if ((active1 & 0xc00f600780000L) != 0L || (active2 & 0xe0000L) != 0L)
                    return 25;
                return -1;
            case 2:
                if ((active0 & 0xffffa27fffc00000L) != 0L || (active1 & 0x4c00001f740005fL) != 0L || (active2 & 0x408000L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 153;
                        jjmatchedPos = 2;
                    }
                    return 25;
                }
                if ((active0 & 0x5d8000300000L) != 0L || (active1 & 0xfb3bffec08b7ffa0L) != 0L || (active2 & 0x1bd7fffL) != 0L)
                    return 25;
                return -1;
            case 3:
                if ((active0 & 0x8007f9fc00000L) != 0L || (active1 & 0x80000083000000L) != 0L || (active2 & 0x8000L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 153;
                        jjmatchedPos = 3;
                    }
                    return 25;
                }
                if ((active0 & 0xfff7aa0060000000L) != 0L || (active1 & 0x4640d0017440005fL) != 0L || (active2 & 0x600037L) != 0L)
                    return 25;
                return -1;
            case 4:
                if ((active0 & 0x8004d9bc00000L) != 0L || (active1 & 0x808000e2000000L) != 0L || (active2 & 0x8000L) != 0L)
                    return 25;
                if ((active0 & 0x3204000000L) != 0L || (active1 & 0x1000000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 153;
                        jjmatchedPos = 4;
                    }
                    return 25;
                }
                return -1;
            case 5:
                if ((active0 & 0x2204000000L) != 0L) {
                    jjmatchedKind = 153;
                    jjmatchedPos = 5;
                    return 25;
                }
                if ((active0 & 0x1000000000L) != 0L || (active1 & 0x41000000L) != 0L)
                    return 25;
                return -1;
            case 6:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 153;
                    jjmatchedPos = 6;
                    return 25;
                }
                if ((active0 & 0x2200000000L) != 0L)
                    return 25;
                return -1;
            default :
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                jjmatchedKind = 177;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000L);
            case 38:
                jjmatchedKind = 166;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
            case 40:
                return jjStopAtPos(0, 179);
            case 41:
                return jjStopAtPos(0, 180);
            case 42:
                return jjStopAtPos(0, 175);
            case 43:
                return jjStopAtPos(0, 157);
            case 44:
                return jjStopAtPos(0, 156);
            case 45:
                return jjStopAtPos(0, 158);
            case 46:
                return jjMoveStringLiteralDfa1_0(0x7fffc00000L, 0x0L, 0x0L);
            case 47:
                jjmatchedKind = 176;
                return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
            case 58:
                return jjStopAtPos(0, 159);
            case 59:
                return jjStopAtPos(0, 6);
            case 60:
                jjmatchedKind = 171;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300000000000L);
            case 61:
                jjmatchedKind = 160;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
            case 62:
                jjmatchedKind = 169;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x440000000000L);
            case 64:
                return jjStopAtPos(0, 161);
            case 94:
                return jjStopAtPos(0, 165);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x1f8000000000L, 0x0L, 0x0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa1_0(0xffffe00000000000L, 0x3fL, 0x0L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x7fffc0L, 0x0L);
            case 68:
            case 100:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L, 0x0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000L, 0x0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x70000000L, 0x0L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000L, 0x0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa1_0(0x100000L, 0x7f000000000L, 0x0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xf80000000000L, 0x0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000000000L, 0x0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000000000L, 0x0L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000000L, 0x0L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000000000000L, 0x0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x7fffffL);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
            case 124:
                jjmatchedKind = 164;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
            case 126:
                return jjStopAtPos(0, 178);
            default :
                return jjMoveNfa_0(3, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active2 & 0x800000000L) != 0L)
                    return jjStopAtPos(1, 163);
                break;
            case 42:
                if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(1, 8, 0);
                break;
            case 60:
                if ((active2 & 0x200000000000L) != 0L)
                    return jjStopAtPos(1, 173);
                break;
            case 61:
                if ((active2 & 0x8000000000L) != 0L)
                    return jjStopAtPos(1, 167);
                else if ((active2 & 0x10000000000L) != 0L)
                    return jjStopAtPos(1, 168);
                else if ((active2 & 0x40000000000L) != 0L)
                    return jjStopAtPos(1, 170);
                else if ((active2 & 0x100000000000L) != 0L)
                    return jjStopAtPos(1, 172);
                break;
            case 62:
                if ((active2 & 0x400000000000L) != 0L)
                    return jjStopAtPos(1, 174);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x40L, active2, 0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0xe000000000000180L, active2, 0x3fL);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x80000080000000L, active2, 0L);
            case 68:
            case 100:
                if ((active1 & 0x1000000000L) != 0L) {
                    jjmatchedKind = 100;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x38080000000L, active1, 0xe000000000L, active2, 0x1000000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x301000000800000L, active2, 0x7fc0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
            case 71:
            case 103:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x4200000L, active1, 0x3000000L, active2, 0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000100000000L, active2, 0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x400101000000L, active1, 0x403fe00L, active2, 0x8000L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x870000000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x200000000L) != 0L) {
                    jjmatchedKind = 97;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xc0200000000L, active1, 0x400000000L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x40100000L, active1, 0x1822180008040000L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x80000L) != 0L) {
                    jjmatchedKind = 83;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000700000L, active2, 0x10000L);
            case 82:
            case 114:
                if ((active1 & 0x4000000000000L) != 0L) {
                    jjmatchedKind = 114;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xffff800000000000L, active1, 0x800000000000fL, active2, 0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x105400000000L, active1, 0x60000000030L, active2, 0x800000L);
            case 84:
            case 116:
                if ((active2 & 0x20000L) != 0L) {
                    jjmatchedKind = 145;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x808000000L, active1, 0L, active2, 0xc0000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x50e00000000000L, active2, 0x300000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0x400000L);
            case 124:
                if ((active2 & 0x400000000L) != 0L)
                    return jjStopAtPos(1, 162);
                break;
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(0, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2);
            return 2;
        }
        switch (curChar) {
            case 56:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(2, 20, 25);
                else if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(2, 21, 25);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x80000080000000L, active2, 0x400000L);
            case 66:
            case 98:
                if ((active2 & 0x100000L) != 0L) {
                    jjmatchedKind = 148;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L, active2, 0x200000L);
            case 67:
            case 99:
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 40, 25);
                else if ((active1 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(2, 73, 25);
                else if ((active1 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(2, 84, 25);
                else if ((active1 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(2, 87, 25);
                else if ((active1 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 98, 25);
                else if ((active1 & 0x2000000000000000L) != 0L) {
                    jjmatchedKind = 125;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(2, 134, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0x4000000001000000L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 39, 25);
                else if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = 42;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 46, 25);
                else if ((active1 & 0x2000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 101, 25);
                else if ((active2 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(2, 146, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x18000800000000L, active1, 0x10L, active2, 0x8000L);
            case 71:
            case 103:
                if ((active1 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 112, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
            case 72:
            case 104:
                if ((active1 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(2, 74, 25);
                else if ((active2 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(2, 135, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                if ((active1 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(2, 71, 25);
                else if ((active1 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(2, 75, 25);
                else if ((active1 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(2, 85, 25);
                else if ((active1 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 102, 25);
                else if ((active1 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 115, 25);
                else if ((active1 & 0x8000000000000000L) != 0L) {
                    jjmatchedKind = 127;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(2, 136, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x300024102000000L, active1, 0L, active2, 0x7L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L, active2, 0L);
            case 75:
            case 107:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L);
            case 76:
            case 108:
                if ((active1 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 105, 25);
                else if ((active1 & 0x200000000000L) != 0L) {
                    jjmatchedKind = 109;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 123, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0xc00202000000000L, active1, 0xc00000000040L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(2, 82, 25);
                else if ((active1 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 104, 25);
                else if ((active2 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(2, 144, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x400000100000000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 76, 25);
                else if ((active2 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(2, 137, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000004000000L, active1, 0L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x201800000L, active1, 0L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 99, 25);
                else if ((active1 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 113, 25);
                else if ((active1 & 0x20000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 117, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x4000001000000000L, active1, 0x4000000L, active2, 0L);
            case 81:
            case 113:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0L);
            case 82:
            case 114:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 44, 25);
                else if ((active1 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(2, 72, 25);
                else if ((active1 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(2, 77, 25);
                else if ((active1 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 91, 25);
                else if ((active1 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 106, 25);
                else if ((active1 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 124, 25);
                else if ((active2 & 0x8L) != 0L) {
                    jjmatchedKind = 131;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(2, 138, 25);
                else if ((active2 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 152, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x50000000L, active1, 0L, active2, 0x30L);
            case 83:
            case 115:
                if ((active1 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(2, 78, 25);
                else if ((active1 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 103, 25);
                else if ((active2 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(2, 139, 25);
                else if ((active2 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(2, 147, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x40000000400000L, active2, 0L);
            case 84:
            case 116:
                if ((active1 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(2, 69, 25);
                else if ((active1 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(2, 79, 25);
                else if ((active1 & 0x10000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 116, 25);
                else if ((active1 & 0x100000000000000L) != 0L) {
                    jjmatchedKind = 120;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 140, 25);
                else if ((active2 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(2, 151, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000003L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x70000000L, active2, 0L);
            case 86:
            case 118:
                if ((active1 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(2, 80, 25);
                else if ((active1 & 0x80000000000L) != 0L) {
                    jjmatchedKind = 107;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(2, 141, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000cL, active2, 0L);
            case 89:
            case 121:
                return jjMoveStringLiteralDfa3_0(active0, 0x8400000L, active1, 0L, active2, 0L);
            case 90:
            case 122:
                if ((active1 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(2, 81, 25);
                else if ((active2 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(2, 142, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(1, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2);
            return 3;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x8001000000000L, active1, 0x1000000L, active2, 0L);
            case 67:
            case 99:
                if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 47, 25);
                else if ((active0 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 49, 25);
                else if ((active0 & 0x40000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 54, 25);
                else if ((active1 & 0x1L) != 0L)
                    return jjStartNfaWithStates_0(3, 64, 25);
                else if ((active1 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(3, 66, 25);
                else if ((active2 & 0x1L) != 0L)
                    return jjStartNfaWithStates_0(3, 128, 25);
                else if ((active2 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(3, 132, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x100000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 56, 25);
                break;
            case 69:
            case 101:
                if ((active0 & 0x20000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 53, 25);
                else if ((active0 & 0x200000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 57, 25);
                else if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 61, 25);
                else if ((active1 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 86, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000L);
            case 71:
            case 103:
                if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 30, 25);
                break;
            case 72:
            case 104:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 63, 25);
                else if ((active1 & 0x40000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 118, 25);
                break;
            case 73:
            case 105:
                if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 43, 25);
                else if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 60, 25);
                else if ((active1 & 0x200000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 121, 25);
                else if ((active1 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 126, 25);
                else if ((active2 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(3, 149, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
            case 76:
            case 108:
                if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 62, 25);
                else if ((active1 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(3, 70, 25);
                else if ((active1 & 0x10000000L) != 0L) {
                    jjmatchedKind = 92;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x202000000L, active1, 0x800000e0000000L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 90, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L, active2, 0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L);
            case 79:
            case 111:
                if ((active0 & 0x400000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 58, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 96, 25);
                else if ((active1 & 0x400000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 122, 25);
                else if ((active2 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 150, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L, active2, 0L);
            case 81:
            case 113:
                if ((active0 & 0x10000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 52, 25);
                break;
            case 82:
            case 114:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 45, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L);
            case 83:
            case 115:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 48, 25);
                else if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 50, 25);
                else if ((active0 & 0x80000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 55, 25);
                else if ((active1 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(3, 65, 25);
                else if ((active1 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(3, 67, 25);
                else if ((active1 & 0x400000000000L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 3;
                } else if ((active2 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(3, 129, 25);
                else if ((active2 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(3, 133, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x800000000000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 59, 25);
                else if ((active1 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(3, 68, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x80400000L, active1, 0L, active2, 0L);
            case 85:
            case 117:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 29, 25);
                break;
            case 87:
            case 119:
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 41, 25);
                else if ((active1 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 108, 25);
                else if ((active2 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(3, 130, 25);
                break;
            case 88:
            case 120:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L, active2, 0L);
            case 90:
            case 122:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(2, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, active2);
            return 4;
        }
        switch (curChar) {
            case 65:
            case 97:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 31, 25);
                break;
            case 66:
            case 98:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(4, 23, 25);
                break;
            case 69:
            case 101:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(4, 22, 25);
                else if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 25, 25);
                else if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 27, 25);
                else if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 38, 25);
                break;
            case 71:
            case 103:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 24, 25);
                break;
            case 72:
            case 104:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 28, 25);
                break;
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0L);
            case 75:
            case 107:
                if ((active0 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 51, 25);
                break;
            case 76:
            case 108:
                if ((active1 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 95, 25);
                else if ((active1 & 0x80000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 119, 25);
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x1000000L, active2, 0L);
            case 80:
            case 112:
                if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 34, 25);
                else if ((active1 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 89, 25);
                else if ((active2 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(4, 143, 25);
                break;
            case 83:
            case 115:
                if ((active1 & 0x20000000L) != 0L) {
                    jjmatchedKind = 93;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 32, 25);
                else if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 35, 25);
                break;
            case 85:
            case 117:
                if ((active1 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 111, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1, active2);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(3, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1, 0L);
            return 5;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
            case 69:
            case 101:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 36, 25);
                break;
            case 76:
            case 108:
                if ((active1 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 88, 25);
                break;
            case 83:
            case 115:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
            case 85:
            case 117:
                if ((active1 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 94, 25);
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1, 0L);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
            return 6;
        }
        switch (curChar) {
            case 68:
            case 100:
                return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
            case 76:
            case 108:
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 37, 25);
                break;
            case 84:
            case 116:
                if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 33, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, active0, 0L, 0L);
    }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0, 0L, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
            return 7;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 26, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(6, active0, 0L, 0L);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 32;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 13)
                                    kind = 13;
                                jjCheckNAdd(5);
                            } else if (curChar == 48) {
                                if (kind > 13)
                                    kind = 13;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 46) {
                                if (kind > 153)
                                    kind = 153;
                                jjCheckNAdd(25);
                            } else if (curChar == 34)
                                jjCheckNAddStates(3, 5);
                            else if (curChar == 39)
                                jjAddStates(6, 7);
                            else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 0:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                                kind = 7;
                            break;
                        case 2:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 4:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(5);
                            break;
                        case 6:
                            if (curChar == 39)
                                jjAddStates(6, 7);
                            break;
                        case 7:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 8:
                            if (curChar == 39 && kind > 18)
                                kind = 18;
                            break;
                        case 10:
                            if ((0x8400000000L & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 11:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(12, 8);
                            break;
                        case 12:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 13:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 14:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(12);
                            break;
                        case 15:
                            if (curChar == 34)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 16:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 18:
                            if ((0x8400000000L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 19:
                            if (curChar == 34 && kind > 19)
                                kind = 19;
                            break;
                        case 20:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(8, 11);
                            break;
                        case 21:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 22:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 23;
                            break;
                        case 23:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(21);
                            break;
                        case 24:
                            if (curChar != 46)
                                break;
                            if (kind > 153)
                                kind = 153;
                            jjCheckNAdd(25);
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 153)
                                kind = 153;
                            jjCheckNAdd(25);
                            break;
                        case 26:
                            if (curChar != 48)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 30:
                            if ((0x3000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        case 31:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(31);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 3:
                        case 25:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 153)
                                kind = 153;
                            jjCheckNAdd(25);
                            break;
                        case 1:
                            if (kind > 7)
                                kind = 7;
                            break;
                        case 7:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 9:
                            if (curChar == 92)
                                jjAddStates(12, 14);
                            break;
                        case 10:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 16:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 17:
                            if (curChar == 92)
                                jjAddStates(15, 17);
                            break;
                        case 18:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 27:
                            if ((0x100000001000000L & l) != 0L)
                                jjCheckNAdd(28);
                            break;
                        case 28:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if ((0x400000004L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                                kind = 7;
                            break;
                        case 7:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 16:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(3, 5);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_3(0x800L);
            default :
                return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_3(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(1, 11);
                break;
            default :
                return 2;
        }
        return 2;
    }

    private final int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                            }
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 9)
                                kind = 9;
                            break;
                        case 2:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_2(0x400L);
            default :
                return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(1, 10);
                break;
            default :
                return 2;
        }
        return 2;
    }

    static final int[] jjnextStates = {
        27, 29, 31, 16, 17, 19, 7, 9, 16, 17, 21, 19, 10, 11, 13, 18,
        20, 22,
    };
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, "\54", "\53", "\55", "\72", "\75", "\100", "\174\174", "\46\46",
        "\174", "\136", "\46", "\75\75", "\41\75", "\76", "\76\75", "\74", "\74\75", "\74\74",
        "\76\76", "\52", "\57", "\41", "\176", "\50", "\51", };
    public static final String[] lexStateNames = {
        "DEFAULT",
        "IN_SINGLE_LINE_COMMENT",
        "IN_FORMAL_COMMENT",
        "IN_MULTI_LINE_COMMENT",
    };
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1,
    };
    static final long[] jjtoToken = {
        0xfffffffffffc2001L, 0xffffffffffffffffL, 0x1ffffff3ffffffL,
    };
    static final long[] jjtoSkip = {
        0xe3eL, 0x0L, 0x0L,
    };
    static final long[] jjtoSpecial = {
        0xe00L, 0x0L, 0x0L,
    };
    static final long[] jjtoMore = {
        0x11c0L, 0x0L, 0x0L,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[32];
    private final int[] jjstateSet = new int[64];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public GASParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public GASParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 32; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 4 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            for (; ;) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 3:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default :
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            case 7:
                if (image == null)
                    image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
                else
                    image.append(new String(input_stream.GetSuffix(jjimageLen)));
                jjimageLen = 0;
                input_stream.backup(1);
                break;
            default :
                break;
        }
    }
}
