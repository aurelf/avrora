/* Generated By:JavaCC: Do not edit this line. ObjDumpParserTokenManager.java */
package avrora.syntax.objdump;
import avrora.*;
import avrora.syntax.*;

public class ObjDumpParserTokenManager implements ObjDumpParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2e30000L) != 0L || (active1 & 0xfffffffffffc0000L) != 0L || (active2 & 0xfffL) != 0L)
         {
            jjmatchedKind = 140;
            return 37;
         }
         if ((active2 & 0x8000000L) != 0L)
            return 23;
         if ((active0 & 0xfffffffffd1c0000L) != 0L || (active1 & 0x3ffffL) != 0L || (active2 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 140;
            return 38;
         }
         return -1;
      case 1:
         if ((active1 & 0x6007b003c0L) != 0L || (active2 & 0x70L) != 0L)
            return 37;
         if ((active0 & 0xf1fffffee3ff0000L) != 0L || (active1 & 0xffffff9ff84ff83fL) != 0L || (active2 & 0x1c0f8fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 1;
            }
            return 37;
         }
         if ((active0 & 0xe0000011c000000L) != 0L || (active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 1;
            }
            return 38;
         }
         return -1;
      case 2:
         if ((active0 & 0xfd000002e0010000L) != 0L || (active1 & 0xffffd9dfff6041bfL) != 0L || (active2 & 0xdebL) != 0L)
            return 37;
         if ((active0 & 0x2fffffd13fe0000L) != 0L || (active1 & 0x2600000fba00L) != 0L || (active2 & 0x1c0204L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 2;
            }
            return 37;
         }
         if ((active0 & 0xc000000L) != 0L || (active1 & 0x400L) != 0L)
            return 38;
         return -1;
      case 3:
         if ((active0 & 0x2ffffbd53e20000L) != 0L || (active1 & 0x1ba3206800ba200L) != 0L || (active2 & 0x300L) != 0L)
            return 37;
         if ((active0 & 0x40001c0000L) != 0L || (active1 & 0x40000041800L) != 0L || (active2 & 0x1c0004L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return 37;
         }
         return -1;
      case 4:
         if ((active0 & 0x40001c0000L) != 0L || (active1 & 0x40400071000L) != 0L || (active2 & 0x4L) != 0L)
            return 37;
         if ((active1 & 0x800L) != 0L || (active2 & 0x180000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return 37;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active1 & 0x20800L) != 0L)
            return 37;
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active2 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 6;
            return 37;
         }
         if ((active2 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
            return 37;
         }
         if ((active2 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 8;
            return 37;
         }
         if ((active2 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 9;
            return 37;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 10;
            return 37;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 43:
         return jjStopAtPos(0, 151);
      case 44:
         return jjStopAtPos(0, 150);
      case 45:
         return jjStopAtPos(0, 152);
      case 46:
         return jjStartNfaWithStates_0(0, 155, 23);
      case 58:
         return jjStopAtPos(0, 149);
      case 59:
         return jjStopAtPos(0, 6);
      case 60:
         return jjStopAtPos(0, 153);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xfc000000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1ffffff001c0000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x3ffL, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x7800L, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000L, 0x40000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x420000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c0000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2210000L, 0x3f800000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x30000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffff000000000000L, 0x3ffL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000800000L, active1, 0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x1ff000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x40000040000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000L, active1, 0x7000000L, active2, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfe00180800000400L, active2, 0x3L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x1800L, active2, 0x140000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000080000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000200000000L, active1, 0x201fL, active2, 0x80004L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x438000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L, active1, 0x200000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010000L, active1, 0xc110c0004020L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000380L, active2, 0x8L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7ffffc00000000L, active1, 0x4000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000080000000L, active1, 0x30000000L, active2, 0x400L);
      case 84:
      case 116:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x60L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x28700000000L, active2, 0x180L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L, active2, 0x200L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000040000L, active2, 0x200L);
      case 66:
      case 98:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0L, active2, 0x100L);
      case 67:
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 38);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 37);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 37);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 38);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 37);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 121, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x2000000000800L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 38);
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 37);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 37);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 133, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000c000000000L, active1, 0L, active2, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 71:
      case 103:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x10002820000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 37);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 37);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 37);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 37);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 37);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 37);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 123, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x180010000000L, active1, 0x38000000000000L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 37);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x200600100000000L, active1, 0x600000000L, active2, 0x40000L);
      case 77:
      case 109:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 37);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 37);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 131, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x200000080000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 37);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 37);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 37);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000000L, active1, 0x2000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 37);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 37);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 37);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 37);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 37);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 37);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 125, 37);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 139, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x600000L, active1, 0x180000000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 37);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 37);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 37);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x20000000200L, active2, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 37);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 37);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 37);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 37);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x180000001c0000L, active1, 0x100000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000L, active2, 0L);
      case 86:
      case 118:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 37);
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0x80000000L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 37);
         break;
      case 90:
      case 122:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 37);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 129, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 37);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 37);
         break;
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x800L, active2, 0x100000L);
      case 67:
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 37);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 37);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 37);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 37);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 37);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 37);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 37);
         break;
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 37);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 37);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 37);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 37);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 37);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 37);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 37);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000L, active1, 0L, active2, 0x40004L);
      case 72:
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 37);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 37);
         break;
      case 73:
      case 105:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 37);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 37);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 37);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 37);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 136, 37);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 37);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 37);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000070000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 37);
         break;
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 37);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 37);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 37);
         break;
      case 81:
      case 113:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 37);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 37);
         break;
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 37);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 37);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 37);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 37);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 37);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 37);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 37);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 37);
         break;
      case 87:
      case 119:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 37);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 37);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 50:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 51:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 37);
         break;
      case 52:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 37);
         break;
      case 75:
      case 107:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 37);
         break;
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 37);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 37);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 37);
         break;
      case 83:
      case 115:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0x100000L);
      case 85:
      case 117:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x40000L);
      case 76:
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 37);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x100000L);
      case 85:
      case 117:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active2, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active2, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(5, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active2, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active2, 0x40000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active2, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active2, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active2, 0x40000L);
      case 82:
      case 114:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(8, 147);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa9_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active2, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa10_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(10, 146);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa11_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa11_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa14_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2);
      return 18;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2);
      return 20;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);
      return 21;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa23_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa24_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa25_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa27_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa27_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, active2);
}
private final int jjMoveStringLiteralDfa28_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, active2);
      return 28;
   }
   switch(curChar)
   {
      case 58:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(28, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, active2);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(25);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjAddStates(6, 7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(8, 10);
                  }
                  else if (curChar == 36)
                     jjCheckNAdd(3);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 36)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 39)
                     jjAddStates(6, 7);
                  break;
               case 5:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 8:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 6);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 17:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar != 36)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(8, 10);
                  break;
               case 29:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (curChar != 36)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(25);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(25);
                  }
                  break;
               case 3:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjAddStates(15, 17);
                  break;
               case 8:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(18, 20);
                  break;
               case 16:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 23:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 28:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   32, 33, 34, 14, 15, 17, 5, 7, 27, 28, 30, 14, 15, 19, 17, 8, 
   9, 11, 16, 18, 20, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\72", "\54", "\53", 
"\55", "\74", "\76\72", "\56", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffc201L, 0xffffffffffffffffL, 0xfff9fffL, 
};
static final long[] jjtoSkip = {
   0xbeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x140L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ObjDumpParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ObjDumpParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
