/* Generated By:JavaCC: Do not edit this line. ISDLParser.java */
package jintgen.isdl.parser;
import jintgen.jigir.*;
import jintgen.isdl.*;
import java.util.List;
import java.util.LinkedList;

public class ISDLParser implements ISDLParserConstants {

    Architecture arch;

/* Begin GRAMMAR */
  final public Architecture Architecture() throws ParseException {
                                Token n;
    jj_consume_token(ARCHITECTURE);
    n = jj_consume_token(IDENTIFIER);
                                      arch = new Architecture(n);
    jj_consume_token(LBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTRUCTION:
      case FORMAT:
      case OPERAND_TYPE:
      case ADDR_MODE:
      case ADDR_SET:
      case GLOBAL:
      case MEMORY:
      case SUBROUTINE:
      case INLINE:
      case EXTERNAL:
      case PSEUDO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Item();
    }
    jj_consume_token(RBRACKET);
          {if (true) return arch;}
    throw new Error("Missing return statement in function");
  }

  final public void Item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTRUCTION:
    case PSEUDO:
      Instruction();
      break;
    case FORMAT:
      FormatDecl();
      break;
    case OPERAND_TYPE:
      OperandTypeDecl();
      break;
    case SUBROUTINE:
    case INLINE:
    case EXTERNAL:
      Subroutine();
      break;
    case ADDR_MODE:
      AddrModeDecl();
      break;
    case ADDR_SET:
      AddrSetDecl();
      break;
    case GLOBAL:
    case MEMORY:
      StateDecl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Instruction() throws ParseException {
    Token n;
    InstrDecl i;
    List o = new LinkedList(),
         s = new LinkedList(),
         p = new LinkedList();
    EncodingDecl e = null;
    List el = new LinkedList();
    boolean pseudo = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSEUDO:
      jj_consume_token(PSEUDO);
                pseudo = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(INSTRUCTION);
    n = jj_consume_token(STRING_LITERAL);
    o = Formals();
    jj_consume_token(LBRACKET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENCODING:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      e = Encoding(n);
                            el.add(e);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTY:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Property(p);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXECUTE:
      s = Execute(s);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
          arch.addInstruction(new InstrDecl(pseudo, n, o, p, s, el));
  }

  final public void Property(List p) throws ParseException {
                          Token name, t, v;
    jj_consume_token(PROPERTY);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(78);
    t = Type();
    jj_consume_token(EQUALS);
    v = Value();
    jj_consume_token(SEMI);
                                                                        p.add(new Property(name, t, v));
  }

  final public Token Value() throws ParseException {
                  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void StateDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
      Global();
      break;
    case MEMORY:
      Memory();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Global() throws ParseException {
                  Token n;
    jj_consume_token(GLOBAL);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(78);
    Type();
    jj_consume_token(SEMI);
  }

  final public void Memory() throws ParseException {
                  Token n;
    jj_consume_token(MEMORY);
    jj_consume_token(DOLLAR);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    Type();
    jj_consume_token(RPAREN);
    jj_consume_token(78);
    Type();
    jj_consume_token(SEMI);
  }

  final public void AddrModeDecl() throws ParseException {
                        Token n; List o = new LinkedList(); List p = new LinkedList(); EncodingDecl e;
    jj_consume_token(ADDR_MODE);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERAND:
      case ENCODING:
      case PROPERTY:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTY:
        Property(p);
        break;
      case OPERAND:
        Operand(o);
        break;
      case ENCODING:
        e = Encoding(n);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACKET);
  }

  final public void AddrSetDecl() throws ParseException {
                       Token n;
    jj_consume_token(ADDR_SET);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    jj_consume_token(IDENTIFIER);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(RBRACKET);
  }

  final public EncodingDecl Encoding(Token n) throws ParseException {
                                   EncodingDecl d; EncodingDecl.Cond ec = null;
    jj_consume_token(ENCODING);
    jj_consume_token(EQUALS);
    d = Format(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      ec = EncodingCond();
                                                        d.setCond(ec);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                                                                            {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EncodingDecl.Cond EncodingCond() throws ParseException {
                                     Token n; Expr e;
    jj_consume_token(WHEN);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    e = Expr();
                                              {if (true) return new EncodingDecl.Cond(n, e);}
    throw new Error("Missing return statement in function");
  }

  final public List Execute(List s) throws ParseException {
    jj_consume_token(EXECUTE);
    Block(s);
                         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void FormatDecl() throws ParseException {
                      Token n; EncodingDecl d;
    jj_consume_token(FORMAT);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    d = Format(n);
                                                  arch.addEncoding(d);
  }

  final public void OperandTypeDecl() throws ParseException {
                           Token n, k, b;
    jj_consume_token(OPERAND_TYPE);
    n = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      OperandKind();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      OperandBody();
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OperandBody() throws ParseException {
                       SymbolMapping m; List o = new LinkedList();
    jj_consume_token(LBRACKET);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
      case WRITE:
      case MAPPING:
      case 79:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAPPING:
        m = SymbolMapping();
        break;
      case READ:
        ReadMethod();
        break;
      case WRITE:
        WriteMethod();
        break;
      case 79:
        SubOperand(o);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACKET);
  }

  final public void SubOperand(List ol) throws ParseException {
                             CodeRegion.Operand o;
    jj_consume_token(79);
    o = Formal();
                                 ol.add(o);
    jj_consume_token(SEMI);
  }

  final public void Operand(List ol) throws ParseException {
                          CodeRegion.Operand o;
    jj_consume_token(OPERAND);
    o = Formal();
                             ol.add(o);
    jj_consume_token(SEMI);
  }

  final public void ReadMethod() throws ParseException {
                      List s = new LinkedList();
    jj_consume_token(READ);
    jj_consume_token(78);
    Type();
    Block(s);
  }

  final public void WriteMethod() throws ParseException {
                       List s = new LinkedList();
    jj_consume_token(WRITE);
    jj_consume_token(78);
    Type();
    Block(s);
  }

  final public void OperandKind() throws ParseException {
                       Token b;
    jj_consume_token(80);
    b = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(81);
    jj_consume_token(78);
    Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      Range();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void Range() throws ParseException {
                 Token l, h;
    jj_consume_token(80);
    l = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(COMMA);
    h = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(81);
  }

  final public SymbolMapping SymbolMapping() throws ParseException {
                                  SymbolMapping m = new SymbolMapping();
    jj_consume_token(MAPPING);
    jj_consume_token(LBRACKET);
    MappingSetElem(m);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      MappingSetElem(m);
    }
    jj_consume_token(RBRACKET);
      {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public void MappingSetElem(SymbolMapping m) throws ParseException {
                                         Token n, i;
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    i = jj_consume_token(INTEGER_LITERAL);
      m.add(n, i);
  }

  final public OperandDecl OperandRangeDecl(Token n, Token k, Token b) throws ParseException {
                                                            Token l, h;
    jj_consume_token(80);
    l = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(COMMA);
    h = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(81);
      {if (true) return new OperandDecl.Immediate(n, b, k, l, h);}
    throw new Error("Missing return statement in function");
  }

  final public Token Kind() throws ParseException {
                 Token t;
    t = jj_consume_token(IDENTIFIER);
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public List OperandSet() throws ParseException {
                      Token i; List l = new LinkedList();
    jj_consume_token(LBRACKET);
    i = jj_consume_token(IDENTIFIER);
                           l.add(i);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      i = jj_consume_token(IDENTIFIER);
                                                               l.add(i);
    }
    jj_consume_token(RBRACKET);
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public EncodingDecl Format(Token n) throws ParseException {
                                 Token pr = null; EncodingDecl d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIORITY:
      jj_consume_token(PRIORITY);
      pr = jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      d = DerivedFormat(pr, n);
      break;
    case LBRACKET:
      d = NewFormat(pr, n);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                           {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public EncodingDecl DerivedFormat(Token pr, Token n) throws ParseException {
                                                  Token p; EncodingDecl d; List l = new LinkedList();
    p = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      l = SubstitutionList();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
      {if (true) return new EncodingDecl.Derived(n, pr, p, l);}
    throw new Error("Missing return statement in function");
  }

  final public EncodingDecl NewFormat(Token pr, Token n) throws ParseException {
                                              List l;
    jj_consume_token(LBRACKET);
    l = ExprList();
    jj_consume_token(RBRACKET);
                             {if (true) return new EncodingDecl(n, pr, l);}
    throw new Error("Missing return statement in function");
  }

  final public List SubstitutionList() throws ParseException {
                            List l = new LinkedList(); EncodingDecl.Substitution s;
    jj_consume_token(LBRACKET);
    s = Substitution();
                             l.add(s);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      s = Substitution();
                                                                   l.add(s);
    }
    jj_consume_token(RBRACKET);
                                                                                       {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public EncodingDecl.Substitution Substitution() throws ParseException {
                                             Token n; Expr e;
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    e = Expr();
                                      {if (true) return new EncodingDecl.Substitution(n, e);}
    throw new Error("Missing return statement in function");
  }

  final public List Formals() throws ParseException {
                   CodeRegion.Operand o; List l = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      o = Formal();
                     l.add(o);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        o = Formal();
                                                     l.add(o);
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                                                                       {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public CodeRegion.Operand Formal() throws ParseException {
                                Token n, t;
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(78);
    t = OperandType();
                                             {if (true) return new CodeRegion.Operand(n, t);}
    throw new Error("Missing return statement in function");
  }

  final public void Subroutine() throws ParseException {
                      boolean i = false; Token m, r; List f, l = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBROUTINE:
    case INLINE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINE:
        jj_consume_token(INLINE);
                 i = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(SUBROUTINE);
      m = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      f = Formals();
      jj_consume_token(RPAREN);
      jj_consume_token(78);
      r = jj_consume_token(IDENTIFIER);
      Block(l);
          arch.addSubroutine(new SubroutineDecl(i, m, f, r, l));
      break;
    case EXTERNAL:
      jj_consume_token(EXTERNAL);
      m = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      f = Formals();
      jj_consume_token(RPAREN);
      jj_consume_token(78);
      r = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMI);
          arch.addSubroutine(new SubroutineDecl(i, m, f, r, null));
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Expr Expr() throws ParseException {
                Expr e;
    e = Cond_Or_Expr();
                         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public List ExprList() throws ParseException {
                    List l = new LinkedList(); Expr e;
    e = Expr();
                  l.add(e);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      e = Expr();
                                                l.add(e);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Term() throws ParseException {
                Expr e;
    if (jj_2_1(2)) {
      e = CallExpr();
    } else if (jj_2_2(2)) {
      e = DotExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        e = VarUse();
        break;
      case INTEGER_LITERAL:
      case BOOLEAN_LITERAL:
        e = Literal();
        break;
      case DOLLAR:
        e = MapAccess();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = Expr();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      e = BitRange(e);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      e = Conversion(e);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Conversion(Expr e) throws ParseException {
                            Token t;
    jj_consume_token(78);
    t = jj_consume_token(IDENTIFIER);
                         {if (true) return new ConversionExpr(e, t);}
    throw new Error("Missing return statement in function");
  }

  final public Expr MapAccess() throws ParseException {
                     Expr e; Token t;
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    e = Expr();
    jj_consume_token(RPAREN);
                                            {if (true) return new MapExpr(t, e);}
    throw new Error("Missing return statement in function");
  }

  final public Expr VarUse() throws ParseException {
                  Token t;
    t = jj_consume_token(IDENTIFIER);
                     {if (true) return new VarExpr(t);}
    throw new Error("Missing return statement in function");
  }

  final public Expr DotExpr() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(82);
    jj_consume_token(IDENTIFIER);
                                    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Literal() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                           {if (true) return new Literal.IntExpr(t);}
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                           {if (true) return new Literal.BoolExpr(t);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr CallExpr() throws ParseException {
                    Token t; List l;
    t = Method();
    l = Parameters();
                                  {if (true) return new CallExpr(t, l);}
    throw new Error("Missing return statement in function");
  }

  final public Token Method() throws ParseException {
                   Token m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      m = jj_consume_token(IDENTIFIER);
      break;
    case READ:
      m = jj_consume_token(READ);
      break;
    case WRITE:
      m = jj_consume_token(WRITE);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public List Parameters() throws ParseException {
                      List l = new LinkedList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case READ:
    case WRITE:
    case BOOLEAN_LITERAL:
    case LPAREN:
    case SUB:
    case NOT:
    case B_COMP:
    case DOLLAR:
    case IDENTIFIER:
      l = ExprList();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Stmt Statement() throws ParseException {
                     Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
      s = LocalDecl();
      break;
    case IF:
      s = IfStatement();
      break;
    default:
      jj_la1[34] = jj_gen;
      if (jj_2_3(2)) {
        s = Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case READ:
        case WRITE:
        case IDENTIFIER:
          s = CallStmt();
          break;
        case RETURN:
          s = ReturnStmt();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public DeclStmt LocalDecl() throws ParseException {
                         Token n, t; Expr e;
    jj_consume_token(LOCAL);
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(78);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    e = Expr();
    jj_consume_token(SEMI);
      {if (true) return new DeclStmt(n, t, e);}
    throw new Error("Missing return statement in function");
  }

  final public IfStmt IfStatement() throws ParseException {
                         Expr c; List t = new LinkedList(), f = new LinkedList();
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    c = Expr();
    jj_consume_token(RPAREN);
    SingleStatement(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      SingleStatement(f);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
      {if (true) return new IfStmt(c, t, f);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStmt ReturnStmt() throws ParseException {
                            Expr e;
    jj_consume_token(RETURN);
    e = Expr();
    jj_consume_token(SEMI);
                              {if (true) return new ReturnStmt(e);}
    throw new Error("Missing return statement in function");
  }

  final public void SingleStatement(List l) throws ParseException {
                                 Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
    case WRITE:
    case LOCAL:
    case IF:
    case RETURN:
    case DOLLAR:
    case IDENTIFIER:
      s = Statement();
                      l.add(s);
      break;
    case LBRACKET:
      Block(l);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public AssignStmt Assignment() throws ParseException {
                            AssignStmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      s = VarAssignment();
      break;
    case DOLLAR:
      s = MapAssignment();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public CallStmt CallStmt() throws ParseException {
                        Token m; List l;
    m = Method();
    l = Parameters();
    jj_consume_token(SEMI);
                                        {if (true) return new CallStmt(m, l);}
    throw new Error("Missing return statement in function");
  }

  final public AssignStmt VarAssignment() throws ParseException {
                               AssignStmt s; Token v, i, j; Expr e;
    v = jj_consume_token(IDENTIFIER);
    s = VarAssignEnd(v);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AssignStmt VarAssignEnd(Token v) throws ParseException {
                                     AssignStmt s; Token i, j; Expr e, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      e = Expr();
                       s = new VarAssignStmt(v, e);
      break;
    default:
      jj_la1[39] = jj_gen;
      if (jj_2_4(3)) {
        jj_consume_token(80);
        i = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(78);
        j = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(81);
        jj_consume_token(EQUALS);
        e = Expr();
                       s = new VarBitRangeAssignStmt(v, i, j, e);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 80:
          jj_consume_token(80);
          b = Expr();
          jj_consume_token(81);
          jj_consume_token(EQUALS);
          e = Expr();
                       s = new VarBitAssignStmt(v, b, e);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AssignStmt MapAssignment() throws ParseException {
                               AssignStmt s; Token v, i, j; Expr ind, e;
    jj_consume_token(DOLLAR);
    v = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    ind = Expr();
    jj_consume_token(RPAREN);
    s = MapAssignmentEnd(v, ind);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AssignStmt MapAssignmentEnd(Token v, Expr ind) throws ParseException {
                                                   AssignStmt s; Token i, j; Expr e, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      e = Expr();
                       s = new MapAssignStmt(v, ind, e);
      break;
    default:
      jj_la1[41] = jj_gen;
      if (jj_2_5(3)) {
        jj_consume_token(80);
        i = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(78);
        j = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(81);
        jj_consume_token(EQUALS);
        e = Expr();
                       s = new MapBitRangeAssignStmt(v, ind, i, j, e);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 80:
          jj_consume_token(80);
          b = Expr();
          jj_consume_token(81);
          jj_consume_token(EQUALS);
          e = Expr();
                       s = new MapBitAssignStmt(v, ind, b, e);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public List Block(List l) throws ParseException {
                       Stmt s;
    jj_consume_token(LBRACKET);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
      case WRITE:
      case LOCAL:
      case IF:
      case RETURN:
      case DOLLAR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_12;
      }
      s = Statement();
                           l.add(s);
    }
    jj_consume_token(RBRACKET);
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expr BitRange(Expr e) throws ParseException {
                          Expr et; Token t1, t2;
    jj_consume_token(80);
    if (jj_2_6(2)) {
      t1 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(78);
      t2 = jj_consume_token(INTEGER_LITERAL);
       e =  new BitRangeExpr(e, t1, t2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case READ:
      case WRITE:
      case BOOLEAN_LITERAL:
      case LPAREN:
      case SUB:
      case NOT:
      case B_COMP:
      case DOLLAR:
      case IDENTIFIER:
        et = Expr();
       e = new BitExpr(e, et);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(81);
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Cond_Or_Expr() throws ParseException {
                        Expr e, et; Token tok;
    e = Cond_Xor_Expr();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      tok = jj_consume_token(OR);
      et = Cond_Xor_Expr();
      e = new Logical.OrExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Cond_Xor_Expr() throws ParseException {
                         Expr e, et; Token tok;
    e = Cond_And_Expr();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      tok = jj_consume_token(XOR);
      et = Cond_And_Expr();
      e = new Logical.XorExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Cond_And_Expr() throws ParseException {
                         Expr e, et; Token tok;
    e = Or_Expr();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_15;
      }
      tok = jj_consume_token(AND);
      et = Or_Expr();
      e = new Logical.AndExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Or_Expr() throws ParseException {
                   Expr e, et; Token tok;
    e = Xor_Expr();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B_OR:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_16;
      }
      tok = jj_consume_token(B_OR);
      et = Xor_Expr();
      e = new Arith.OrExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Xor_Expr() throws ParseException {
                    Expr e, et; Token tok;
    e = And_Expr();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B_XOR:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_17;
      }
      tok = jj_consume_token(B_XOR);
      et = And_Expr();
      e = new Arith.XorExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr And_Expr() throws ParseException {
                    Expr e, et; Token tok;
    e = Equ_Expr();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B_AND:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_18;
      }
      tok = jj_consume_token(B_AND);
      et = Equ_Expr();
      e = new Arith.AndExpr(e, et);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Equ_Expr() throws ParseException {
                    Expr e, et;
    e = Rel_Expr();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        et = Rel_Expr();
                            e = new Logical.EquExpr(e, et);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        et = Rel_Expr();
                            e = new Logical.NequExpr(e, et);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Rel_Expr() throws ParseException {
                    Expr e, et; Token tok;
    e = Shift_Expr();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
      case LESSEQ:
      case GREATER:
      case GREATEREQ:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
        et = Shift_Expr();
                              e = new Logical.LessExpr(e, et);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        et = Shift_Expr();
                              e = new Logical.GreaterExpr(e, et);
        break;
      case LESSEQ:
        jj_consume_token(LESSEQ);
        et = Shift_Expr();
                              e = new Logical.LessEquExpr(e, et);
        break;
      case GREATEREQ:
        jj_consume_token(GREATEREQ);
        et = Shift_Expr();
                              e = new Logical.GreaterEquExpr(e, et);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Shift_Expr() throws ParseException {
                      Expr e, et; Token tok;
    e = Add_Expr();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFTLEFT:
      case SHIFTRIGHT:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFTLEFT:
        jj_consume_token(SHIFTLEFT);
        et = Add_Expr();
                            e = new Arith.ShiftLeftExpr(e, et);
        break;
      case SHIFTRIGHT:
        jj_consume_token(SHIFTRIGHT);
        et = Add_Expr();
                            e = new Arith.ShiftRightExpr(e, et);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Add_Expr() throws ParseException {
                    Expr e, et; Token tok;
    e = Mul_Expr();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        et = Mul_Expr();
                           e = new Arith.AddExpr(e, et);
        break;
      case SUB:
        jj_consume_token(SUB);
        et = Mul_Expr();
                           e = new Arith.SubExpr(e, et);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Mul_Expr() throws ParseException {
                    Expr e, et; Token tok;
    e = Un_Expr();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        et = Un_Expr();
                          e = new Arith.MulExpr(e, et);
        break;
      case DIV:
        jj_consume_token(DIV);
        et = Un_Expr();
                          e = new Arith.DivExpr(e, et);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr Un_Expr() throws ParseException {
                   Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B_COMP:
      jj_consume_token(B_COMP);
      e = Term();
                      e = new Arith.CompExpr(e);
      break;
    case NOT:
      jj_consume_token(NOT);
      e = Term();
                      e = new Logical.NotExpr(e);
      break;
    case SUB:
      jj_consume_token(SUB);
      e = Term();
                      e = new Arith.NegExpr(e);
      break;
    case INTEGER_LITERAL:
    case READ:
    case WRITE:
    case BOOLEAN_LITERAL:
    case LPAREN:
    case DOLLAR:
    case IDENTIFIER:
      e = Term();
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Token Type() throws ParseException {
                 Token t;
    t = jj_consume_token(IDENTIFIER);
                       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token OperandType() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(80)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(80)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  public ISDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7500000,0x7500000,0x0,0x80000000,0x0,0x0,0x82000,0x0,0x80800000,0x80800000,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x40000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x18000000,0x18002000,0x0,0x18000000,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x18000000,0x18002000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18002000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x9c0c,0x9c0c,0x8000,0x0,0x20000,0x1,0x4000,0xc,0x20000,0x20000,0x200000,0x10000,0x0,0x1040000,0x10,0x10,0x0,0x200000,0x200000,0x0,0x40000,0x0,0x200000,0x200000,0x0,0x800,0x1c00,0x200000,0x404000,0x0,0x0,0x4000,0x0,0x10404000,0x22,0x2000,0x40,0x42022,0x0,0x100000,0x0,0x100000,0x0,0x2022,0x10404000,0x100,0x200,0x80,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x18000000,0x18000000,0x60000000,0x60000000,0x10404000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x8000,0x8000,0x10000,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0xc00,0x10000,0x4000,0x0,0x800,0xc0c,0x0,0x800,0x0,0xc00,0xc00,0x0,0x10000,0x0,0x10000,0xc00,0xc0c,0x0,0x0,0x0,0x1,0x2,0x0,0x30,0x30,0x3c0,0x3c0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0c,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ISDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ISDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ISDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ISDLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ISDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ISDLParser(ISDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ISDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
